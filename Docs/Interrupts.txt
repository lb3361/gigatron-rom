See also:
https://github.com/kervinck/gigatron-rom/issues/125
https://forum.gigatron.io/viewtopic.php?f=4&t=175

vCPU interrupts
---------------

vReset
------

vReset is triggered when vCPU jumps to address 0x1f0. The vCPU code
stored in 0x1f0 is setup during the cold boot. This code
executes a private sequence that resets essentials variables then
loads and executes Reset.gt1. Thanks to a dedicated vCPU instructon,
this code has been reduced from six bytes to two bytes, making
space for additional firmware variables. 

vReset could be intercepted by copying and replacing this code by a
simple CALL xx where xx is the zero page address of a reset
vector. This is not advised because users would have to
power cycle the gigatron to restore its normal operation.


vIRQ
----

Vertical blank interrupt triggering each time [frameCount] wraps
around to 0 (and the interrupt vector is non-zero).

Interrupt vector: $1f6.$1f7

-- For ROM >= v6

Minimal context of vPC, vAC, and vCpuSelect is stored at $30..$35.
The mechanism won't save any further context (vLR, vSP, sysArgs, ...)!
The interrupt handler always starts in vCPU mode.

Return from interrupt sequence: 
        LDWI $400               ;RTI
        LUP 0                   ;LUP argument is ignored

This sequence restores the saved context, including vCpuSelect.

-- For ROM < v6

Minimal context of vPC and vAC will be stored at $30..$33. The
mechanism won't save any further context (vLR, vSP, sysArgs, ...)!

Return from interrupt sequence: 
        LDWI $400               ;RTI 0
        LUP 0

The interrupt handler always starts in vCPU mode. Fast return to
vCPU code is immediate: when possible it takes place in the same
time slice (48 cycles).

If we potentially interrupt non-vCPU code (v6502), the interrupt
handler must store, in zero page ($xx), the vAC value it receives.
The programmer can decide on the address $xx. Upon entry, vAC holds
additional state information that allows switching back to non-vCPU.
For future extendibility, the handler must store the whole word.

        STW $xx

Then return from the handler with:
        LDWI $400               ;RTI $xx
        LUP $xx

This will switch back to the interrupted interpreter. It takes
effect in the next timeslice. The return handler waits for that.

-- End of document --
